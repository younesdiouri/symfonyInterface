<?php

namespace OC\PlatformBundle\Repository;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
    public function myFindAll()
    {
        return $this
            ->createQueryBuilder('a')
            ->getQuery()
            ->getResult()
            ;
    }

    public function myFindOne ($id)
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->where('a.id = :id')
            ->setParameter('id', $id)
            ;
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function findByAuthorAndDate($author, $year)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->where('a.author = :author')
                ->setParameter('author', $author)
            ->andWhere('a.date < :year')
                ->setParameter('year', $year)
            ->orderBy('a.date', 'DESC')
            ;

        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function whereCurrentYear(QueryBuilder $qb)
    {
        $qb
            ->andWhere('a.date BETWEEN :start AND :end')
            ->setParameter('start', new \Datetime(date('Y').'-01-01')) //date entre le 1er
        //janvier de cette année
            ->setParameter('end', new \DateTime(date('Y').'-12-31')) // et le 31 décembre de
        //cette année
        ;
    }
    public function myFind()
    {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->where('a.author = :author')
            ->setParameter('author', 'Marine')
            ;
        //on applique notre condition sur le QueryBuilder
        $this->whereCurrentYear($qb);
        //on peut ajouter ce qu'on veut après
        $qb->orderBy('a.date', 'DESC');

        return $qb
            ->getQuery()
            ->getResult()
            ;
    }
}
